name: iOS Build and Test

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  workflow_dispatch:

# Add permissions for test reporter
permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write

env:
  DEVELOPER_DIR: /Applications/Xcode_16.2.app/Contents/Developer
  SCHEME: coparent

jobs:
  test:
    name: Test iOS App
    runs-on: macos-14
    timeout-minutes: 45
    
    strategy:
      matrix:
        destination: 
          # Use actual available simulators
          - platform=iOS Simulator,name=iPhone 16 Pro,OS=18.4
          - platform=iOS Simulator,name=iPad Pro 13-inch (M4),OS=18.4
      fail-fast: false  # Continue other jobs even if one fails

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Cache derived data
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-derived-data-${{ hashFiles('**/project.pbxproj') }}
          restore-keys: |
            ${{ runner.os }}-derived-data-

      - name: Cache Swift Package Manager
        uses: actions/cache@v4
        with:
          path: .build
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Install xcpretty
        run: |
          gem install xcpretty

      - name: List available simulators
        run: |
          xcrun simctl list devices available

      - name: Create simulator if needed
        run: |
          # Extract device name and OS from destination
          DEVICE_NAME=$(echo "${{ matrix.destination }}" | sed -n 's/.*name=\([^,]*\).*/\1/p')
          OS_VERSION=$(echo "${{ matrix.destination }}" | sed -n 's/.*OS=\([^,]*\).*/\1/p')
          
          # Check if simulator exists, create if not
          if ! xcrun simctl list devices available | grep -q "$DEVICE_NAME.*$OS_VERSION"; then
            echo "Creating simulator: $DEVICE_NAME with iOS $OS_VERSION"
            DEVICE_TYPE=$(xcrun simctl list devicetypes | grep "$DEVICE_NAME" | head -1 | grep -o 'com\.apple\.CoreSimulator\.SimDeviceType\.[^)]*')
            RUNTIME=$(xcrun simctl list runtimes | grep "iOS $OS_VERSION" | head -1 | grep -o 'com\.apple\.CoreSimulator\.SimRuntime\.[^)]*' || xcrun simctl list runtimes | grep "iOS" | tail -1 | grep -o 'com\.apple\.CoreSimulator\.SimRuntime\.[^)]*')
            
            if [ -n "$DEVICE_TYPE" ] && [ -n "$RUNTIME" ]; then
              xcrun simctl create "Test $DEVICE_NAME" "$DEVICE_TYPE" "$RUNTIME" || true
            fi
          fi

      - name: Build and test
        run: |
          set -o pipefail
          xcodebuild \
            -scheme "$SCHEME" \
            -project coparent.xcodeproj \
            -destination "${{ matrix.destination }}" \
            -derivedDataPath ~/Library/Developer/Xcode/DerivedData \
            -enableCodeCoverage YES \
            -resultBundlePath TestResults-${{ strategy.job-index }}.xcresult \
            -skipPackagePluginValidation \
            clean build test | xcpretty --report junit --output test-results-${{ strategy.job-index }}.xml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ strategy.job-index }}
          path: |
            test-results-${{ strategy.job-index }}.xml
            TestResults-${{ strategy.job-index }}.xcresult

      - name: Upload test results to GitHub
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Test Results (${{ matrix.destination }})
          path: test-results-${{ strategy.job-index }}.xml
          reporter: java-junit
          fail-on-error: false

  build-for-release:
    name: Build for Release
    runs-on: macos-14
    timeout-minutes: 30
    needs: test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Cache derived data
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-derived-data-${{ hashFiles('**/project.pbxproj') }}
          restore-keys: |
            ${{ runner.os }}-derived-data-

      - name: Build for release
        run: |
          set -o pipefail
          xcodebuild \
            -scheme "$SCHEME" \
            -project coparent.xcodeproj \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -derivedDataPath ~/Library/Developer/Xcode/DerivedData \
            -archivePath coparent.xcarchive \
            -skipPackagePluginValidation \
            archive

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-archive
          path: coparent.xcarchive

  code-quality:
    name: Code Quality Analysis
    runs-on: macos-14
    timeout-minutes: 20
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Install SwiftLint
        run: |
          brew install swiftlint

      - name: Run SwiftLint
        run: |
          swiftlint lint --reporter github-actions-logging

      - name: Build and analyze
        run: |
          set -o pipefail
          xcodebuild \
            -scheme "$SCHEME" \
            -project coparent.xcodeproj \
            -destination "platform=iOS Simulator,name=iPhone 16 Pro,OS=18.4" \
            -derivedDataPath ~/Library/Developer/Xcode/DerivedData \
            -skipPackagePluginValidation \
            analyze

  security-scan:
    name: Security Scan
    runs-on: macos-14
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/ci
        continue-on-error: true

  dependency-check:
    name: Dependency Vulnerability Check
    runs-on: macos-14
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for known vulnerabilities
        run: |
          # Check Package.swift if it exists
          if [ -f "Package.swift" ]; then
            echo "Checking Swift Package dependencies..."
            swift package show-dependencies
          fi
          
          # Check for common vulnerable patterns
          echo "Checking for potential security issues..."
          grep -r "http://" . --include="*.swift" || true
          grep -r "NSAllowsArbitraryLoads" . --include="*.plist" || true 