name: iOS Build and Test

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  workflow_dispatch:
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

# Add permissions for test reporter
permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  security-events: write

env:
  DEVELOPER_DIR: /Applications/Xcode_16.2.app/Contents/Developer
  SCHEME: coparent
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

jobs:
  # Fast feedback job - runs first for quick validation
  quick-validation:
    name: Quick Validation
    runs-on: macos-14
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Cache Swift Package Manager
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Caches/org.swift.swiftpm
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved', '**/Package.swift') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Install SwiftLint
        run: |
          brew install swiftlint

      - name: Run SwiftLint
        run: |
          swiftlint lint --reporter github-actions-logging

      - name: Resolve Package Dependencies
        run: |
          xcodebuild -resolvePackageDependencies -project coparent.xcodeproj

      - name: Download iOS Platform (Required for GitHub Actions)
        run: |
          echo "Downloading iOS platform - this is required on GitHub Actions runners"
          sudo xcodebuild -downloadPlatform iOS

      - name: List available simulators after platform download
        run: |
          echo "Available runtimes:"
          xcrun simctl list runtimes
          echo "Available device types:"
          xcrun simctl list devicetypes
          echo "Available devices:"
          xcrun simctl list devices available

      - name: Quick Build Check
        run: |
          set -o pipefail
          # Use a more compatible destination for quick validation
          xcodebuild \
            -scheme "$SCHEME" \
            -project coparent.xcodeproj \
            -destination "platform=iOS Simulator,name=iPhone 15 Pro,OS=17.5" \
            -skipPackagePluginValidation \
            build-for-testing | xcpretty

  # Comprehensive testing matrix
  test-matrix:
    name: Test iOS App
    runs-on: macos-14
    timeout-minutes: 60
    needs: quick-validation
    
    strategy:
      matrix:
        include:
          # iOS 17.x testing (stable and widely available)
          - destination: "platform=iOS Simulator,name=iPhone 15 Pro,OS=17.5"
            name: "iPhone 15 Pro iOS 17.5"
            test_plan: "UnitTests"
          - destination: "platform=iOS Simulator,name=iPhone 15,OS=17.5"
            name: "iPhone 15 iOS 17.5"
            test_plan: "UnitTests"
          - destination: "platform=iOS Simulator,name=iPad Pro (12.9-inch) (6th generation),OS=17.5"
            name: "iPad Pro iOS 17.5"
            test_plan: "UnitTests"
          # iOS 18.x testing (if available after platform download)
          - destination: "platform=iOS Simulator,name=iPhone 15 Pro,OS=18.0"
            name: "iPhone 15 Pro iOS 18.0"
            test_plan: "UnitTests"
          # UI Tests on stable device
          - destination: "platform=iOS Simulator,name=iPhone 15 Pro,OS=17.5"
            name: "iPhone 15 Pro UI Tests"
            test_plan: "UITests"
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Cache derived data
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-derived-data-${{ hashFiles('**/project.pbxproj') }}-${{ matrix.name }}
          restore-keys: |
            ${{ runner.os }}-derived-data-${{ hashFiles('**/project.pbxproj') }}-
            ${{ runner.os }}-derived-data-

      - name: Cache Swift Package Manager
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/Library/Caches/org.swift.swiftpm
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved', '**/Package.swift') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Download iOS Platform (Required for GitHub Actions)
        run: |
          echo "Downloading iOS platform - this is required on GitHub Actions runners"
          sudo xcodebuild -downloadPlatform iOS

      - name: Install xcpretty and other tools
        run: |
          gem install xcpretty
          brew install xcbeautify

      - name: List available simulators after platform download
        run: |
          echo "Available runtimes:"
          xcrun simctl list runtimes
          echo "Available device types:"
          xcrun simctl list devicetypes
          echo "Available devices:"
          xcrun simctl list devices available

      - name: Create simulator if needed
        run: |
          # Extract device name and OS from destination
          DEVICE_NAME=$(echo "${{ matrix.destination }}" | sed -n 's/.*name=\([^,]*\).*/\1/p')
          OS_VERSION=$(echo "${{ matrix.destination }}" | sed -n 's/.*OS=\([^,]*\).*/\1/p')
          
          echo "Checking for simulator: $DEVICE_NAME with iOS $OS_VERSION"
          
          # Check if simulator exists
          if ! xcrun simctl list devices available | grep -q "$DEVICE_NAME.*$OS_VERSION"; then
            echo "Simulator not found. Attempting to create: $DEVICE_NAME with iOS $OS_VERSION"
            
            # Find device type (try multiple variations)
            DEVICE_TYPE=""
            for name_variation in "$DEVICE_NAME" "$(echo $DEVICE_NAME | sed 's/ (.*)//')"; do
              DEVICE_TYPE=$(xcrun simctl list devicetypes | grep -i "$name_variation" | head -1 | grep -o 'com\.apple\.CoreSimulator\.SimDeviceType\.[^)]*' || echo "")
              if [ -n "$DEVICE_TYPE" ]; then
                echo "Found device type: $DEVICE_TYPE for name: $name_variation"
                break
              fi
            done
            
            # Find runtime (try exact version first, then fallback)
            RUNTIME=""
            for version_variation in "$OS_VERSION" "$(echo $OS_VERSION | cut -d. -f1-2)" "$(echo $OS_VERSION | cut -d. -f1)"; do
              RUNTIME=$(xcrun simctl list runtimes | grep "iOS $version_variation" | head -1 | grep -o 'com\.apple\.CoreSimulator\.SimRuntime\.[^)]*' || echo "")
              if [ -n "$RUNTIME" ]; then
                echo "Found runtime: $RUNTIME for version: $version_variation"
                break
              fi
            done
            
            # Fallback to latest iOS runtime if specific version not found
            if [ -z "$RUNTIME" ]; then
              RUNTIME=$(xcrun simctl list runtimes | grep "iOS" | tail -1 | grep -o 'com\.apple\.CoreSimulator\.SimRuntime\.[^)]*' || echo "")
              echo "Using fallback runtime: $RUNTIME"
            fi
            
            if [ -n "$DEVICE_TYPE" ] && [ -n "$RUNTIME" ]; then
              echo "Creating simulator with device type: $DEVICE_TYPE and runtime: $RUNTIME"
              xcrun simctl create "Test $DEVICE_NAME" "$DEVICE_TYPE" "$RUNTIME" || true
            else
              echo "Warning: Could not find suitable device type or runtime"
              echo "Available device types:"
              xcrun simctl list devicetypes | head -10
              echo "Available runtimes:"
              xcrun simctl list runtimes
            fi
          else
            echo "Simulator already exists"
          fi

      - name: Boot simulator
        run: |
          DEVICE_NAME=$(echo "${{ matrix.destination }}" | sed -n 's/.*name=\([^,]*\).*/\1/p')
          DEVICE_ID=$(xcrun simctl list devices | grep "$DEVICE_NAME" | grep "Booted\|Shutdown" | head -1 | grep -E -o -i "([0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12})")
          if [ -n "$DEVICE_ID" ]; then
            xcrun simctl boot "$DEVICE_ID" || true
            xcrun simctl bootstatus "$DEVICE_ID" -b
          fi

      - name: Build and test
        run: |
          set -o pipefail
          
          if [ "${{ matrix.test_plan }}" == "UITests" ]; then
            # Run UI Tests
            xcodebuild \
              -scheme "$SCHEME" \
              -project coparent.xcodeproj \
              -destination "${{ matrix.destination }}" \
              -derivedDataPath ~/Library/Developer/Xcode/DerivedData \
              -enableCodeCoverage YES \
              -resultBundlePath TestResults-${{ strategy.job-index }}.xcresult \
              -skipPackagePluginValidation \
              -only-testing:coparentUITests \
              clean build test | xcbeautify
          else
            # Run Unit Tests
            xcodebuild \
              -scheme "$SCHEME" \
              -project coparent.xcodeproj \
              -destination "${{ matrix.destination }}" \
              -derivedDataPath ~/Library/Developer/Xcode/DerivedData \
              -enableCodeCoverage YES \
              -resultBundlePath TestResults-${{ strategy.job-index }}.xcresult \
              -skipPackagePluginValidation \
              -only-testing:coparentTests \
              clean build test | xcbeautify
          fi

      - name: Generate test report
        if: always()
        run: |
          if [ -d "TestResults-${{ strategy.job-index }}.xcresult" ]; then
            xcrun xccov view --report TestResults-${{ strategy.job-index }}.xcresult > coverage-${{ strategy.job-index }}.txt
            xcrun xcresulttool export --type junit TestResults-${{ strategy.job-index }}.xcresult --output-path test-results-${{ strategy.job-index }}.xml
          fi

      - name: Upload test results and coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.name }}-${{ strategy.job-index }}
          path: |
            test-results-${{ strategy.job-index }}.xml
            TestResults-${{ strategy.job-index }}.xcresult
            coverage-${{ strategy.job-index }}.txt
          retention-days: 30

      - name: Upload test results to GitHub
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Test Results (${{ matrix.name }})
          path: test-results-${{ strategy.job-index }}.xml
          reporter: java-junit
          fail-on-error: false

      - name: Upload coverage reports to Codecov
        if: always() && matrix.test_plan == 'UnitTests'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage-${{ strategy.job-index }}.txt
          fail_ci_if_error: false

  # Build for different configurations and platforms
  build-matrix:
    name: Build iOS App
    runs-on: macos-14
    timeout-minutes: 45
    needs: quick-validation
    
    strategy:
      matrix:
        configuration: [Debug, Release]
        destination: 
          - "generic/platform=iOS"
          - "platform=iOS Simulator,name=iPhone 15 Pro,OS=17.5"
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Cache derived data
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-derived-data-${{ hashFiles('**/project.pbxproj') }}-${{ matrix.configuration }}
          restore-keys: |
            ${{ runner.os }}-derived-data-${{ hashFiles('**/project.pbxproj') }}-
            ${{ runner.os }}-derived-data-

      - name: Download iOS Platform (Required for simulator builds)
        if: contains(matrix.destination, 'iOS Simulator')
        run: |
          echo "Downloading iOS platform for simulator builds"
          sudo xcodebuild -downloadPlatform iOS

      - name: Build app
        run: |
          set -o pipefail
          
          if [ "${{ matrix.destination }}" == "generic/platform=iOS" ]; then
            # Build archive for device
            xcodebuild \
              -scheme "$SCHEME" \
              -project coparent.xcodeproj \
              -configuration ${{ matrix.configuration }} \
              -destination "${{ matrix.destination }}" \
              -derivedDataPath ~/Library/Developer/Xcode/DerivedData \
              -archivePath coparent-${{ matrix.configuration }}.xcarchive \
              -skipPackagePluginValidation \
              archive | xcbeautify
          else
            # Build for simulator
            xcodebuild \
              -scheme "$SCHEME" \
              -project coparent.xcodeproj \
              -configuration ${{ matrix.configuration }} \
              -destination "${{ matrix.destination }}" \
              -derivedDataPath ~/Library/Developer/Xcode/DerivedData \
              -skipPackagePluginValidation \
              build | xcbeautify
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: matrix.destination == 'generic/platform=iOS'
        with:
          name: ios-archive-${{ matrix.configuration }}
          path: coparent-${{ matrix.configuration }}.xcarchive
          retention-days: 30

  # Code quality and security analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: macos-14
    timeout-minutes: 30
    needs: quick-validation
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Install tools
        run: |
          brew install swiftlint sonarqube

      - name: Run SwiftLint with detailed output
        run: |
          swiftlint lint --reporter github-actions-logging --config .swiftlint.yml 2>&1 | tee swiftlint-results.txt
          swiftlint lint --reporter sonarqube > swiftlint-sonar.xml || true

      - name: Download iOS Platform (Required for GitHub Actions)
        run: |
          echo "Downloading iOS platform - this is required on GitHub Actions runners"
          sudo xcodebuild -downloadPlatform iOS

      - name: Static analysis with Xcode
        run: |
          set -o pipefail
          xcodebuild \
            -scheme "$SCHEME" \
            -project coparent.xcodeproj \
            -destination "platform=iOS Simulator,name=iPhone 15 Pro,OS=17.5" \
            -derivedDataPath ~/Library/Developer/Xcode/DerivedData \
            -skipPackagePluginValidation \
            analyze | xcbeautify

      - name: Upload code quality artifacts
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-results
          path: |
            swiftlint-results.txt
            swiftlint-sonar.xml
          retention-days: 30

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: macos-14
    timeout-minutes: 20
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/ci
            p/swift
        continue-on-error: true

      - name: Check for hardcoded secrets
        run: |
          echo "Checking for potential hardcoded secrets..."
          grep -r "password\|secret\|key\|token" . --include="*.swift" --exclude-dir=".git" || true
          grep -r "http://" . --include="*.swift" --exclude-dir=".git" || true
          grep -r "NSAllowsArbitraryLoads" . --include="*.plist" --exclude-dir=".git" || true

  # Performance testing
  performance-test:
    name: Performance Tests
    runs-on: macos-14
    timeout-minutes: 45
    needs: quick-validation
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Download iOS Platform (Required for GitHub Actions)
        run: |
          echo "Downloading iOS platform - this is required on GitHub Actions runners"
          sudo xcodebuild -downloadPlatform iOS

      - name: Run performance tests
        run: |
          set -o pipefail
          xcodebuild \
            -scheme "$SCHEME" \
            -project coparent.xcodeproj \
            -destination "platform=iOS Simulator,name=iPhone 15 Pro,OS=17.5" \
            -derivedDataPath ~/Library/Developer/Xcode/DerivedData \
            -enableCodeCoverage YES \
            -resultBundlePath PerformanceResults.xcresult \
            -skipPackagePluginValidation \
            test -testPlan PerformanceTests | xcbeautify

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: PerformanceResults.xcresult
          retention-days: 30

  # Summary job
  ci-summary:
    name: CI Summary
    runs-on: macos-14
    timeout-minutes: 10
    needs: [test-matrix, build-matrix, code-quality, security-scan]
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate CI summary
        run: |
          echo "# CI/CD Pipeline Summary" > ci-summary.md
          echo "" >> ci-summary.md
          echo "## Test Results" >> ci-summary.md
          
          # Count test artifacts
          TEST_COUNT=$(find artifacts -name "test-results-*.xml" | wc -l)
          echo "- Total test configurations: $TEST_COUNT" >> ci-summary.md
          
          # Check build artifacts
          if [ -d "artifacts" ]; then
            echo "- Build artifacts generated: ✅" >> ci-summary.md
          fi
          
          echo "" >> ci-summary.md
          echo "## Code Quality" >> ci-summary.md
          
          if [ -f "artifacts/code-quality-results/swiftlint-results.txt" ]; then
            echo "- SwiftLint analysis completed ✅" >> ci-summary.md
          fi
          
          echo "" >> ci-summary.md
          echo "## Security" >> ci-summary.md
          echo "- Security scan completed ✅" >> ci-summary.md
          
          echo "" >> ci-summary.md
          echo "Generated at: $(date)" >> ci-summary.md

      - name: Upload CI summary
        uses: actions/upload-artifact@v4
        with:
          name: ci-summary
          path: ci-summary.md
          retention-days: 90 